installed_and_loaded <- function(pkg){
# Load packages. Install them if needed.
# CODE SOURCE: https://gist.github.com/stevenworthington/3178163
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
# required packages
packages <- c("prettydoc","tidyverse", "caret", "pROC", "DT", "knitr", "ggthemes", "Hmisc", "psych", "corrplot", "reshape2", "car", "MASS", "ResourceSelection", "boot", "tinytex", "devtools", "VIM", "GGally", "missForest")
#install_version("rmarkdown",version=1.8)
#excute function and display the loaded packages
table(installed_and_loaded(packages))
#data.frame(installed_and_loaded(packages))
#installed_and_loaded(packages)
knitr::opts_chunk$set(
error = F
, message = T
#,tidy = T
, cache = T
, warning = F
, echo = F
)
# prettydoc::html_pretty:
#   theme: cayman
# highlight: github
installed_and_loaded <- function(pkg){
# Load packages. Install them if needed.
# CODE SOURCE: https://gist.github.com/stevenworthington/3178163
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg)) install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
# required packages
packages <- c("prettydoc","tidyverse", "caret", "pROC", "DT", "knitr", "ggthemes", "Hmisc", "psych", "corrplot", "reshape2", "car", "MASS", "ResourceSelection", "boot", "tinytex", "devtools", "VIM", "GGally", "missForest")
#install_version("rmarkdown",version=1.8)
#excute function and display the loaded packages
table(installed_and_loaded(packages))
#data.frame(installed_and_loaded(packages))
#installed_and_loaded(packages)
# 1. DATA EXPLORATION
train_data <- read.csv("https://raw.githubusercontent.com/kylegilde/D621-Data-Mining/master/HW4%20Auto%20Accident%20Prediction/insurance_training_data.csv") %>%
dplyr::select(-INDEX) %>%
mutate(
INCOME = as.numeric(INCOME),
HOME_VAL = as.numeric(HOME_VAL),
BLUEBOOK = as.numeric(BLUEBOOK),
OLDCLAIM = as.numeric(OLDCLAIM),
MSTATUS = as.factor(str_remove(MSTATUS, "^z_")),
SEX = as.factor(str_remove(SEX, "^z_")),
EDUCATION = as.factor(str_remove(EDUCATION, "^z_")),
JOB = as.factor(str_remove(JOB, "^z_")),
CAR_TYPE = as.factor(str_remove(CAR_TYPE, "^z_")),
URBANICITY = as.factor(str_remove(URBANICITY, "^z_"))
)
eval_data <- read.csv("https://raw.githubusercontent.com/kylegilde/D621-Data-Mining/master/HW4%20Auto%20Accident%20Prediction/insurance-evaluation-data.csv") %>%
dplyr::select(-INDEX) %>%
mutate(
INCOME = as.numeric(INCOME),
HOME_VAL = as.numeric(HOME_VAL),
BLUEBOOK = as.numeric(BLUEBOOK),
OLDCLAIM = as.numeric(OLDCLAIM),
MSTATUS = as.factor(str_remove(MSTATUS, "^z_")),
SEX = as.factor(str_remove(SEX, "^z_")),
EDUCATION = as.factor(str_remove(EDUCATION, "^z_")),
JOB = as.factor(str_remove(JOB, "^z_")),
CAR_TYPE = as.factor(str_remove(CAR_TYPE, "^z_")),
URBANICITY = as.factor(str_remove(URBANICITY, "^z_"))
)
summary_metrics <- function(df){
###Creates summary metrics table
metrics_only <- df[, sapply(df, is.numeric)]
df_metrics <- psych::describe(metrics_only, quant = c(.25,.75))
df_metrics$unique_values = rapply(metrics_only, function(x) length(unique(x)))
df_metrics <-
dplyr::select(df_metrics, n, unique_values, min, Q.1st = Q0.25, median, mean, Q.3rd = Q0.75,
max, range, sd, skew, kurtosis
)
return(df_metrics)
}
metrics_df <- summary_metrics(train_data)
datatable(round(metrics_df, 2), options = list(searching = F, paging = F))
#kable(metrics_df, digits = 1, format.args = list(big.mark = ',', scientific = F, drop0trailing = T))
###Categorical & Discrete variables Frequencies
cat_discrete_vars <- train_data %>%
mutate(
TARGET_FLAG	= as.factor(TARGET_FLAG),
KIDSDRIV	= as.factor(KIDSDRIV),
HOMEKIDS	= as.factor(HOMEKIDS),
CLM_FREQ	= as.factor(CLM_FREQ),
MVR_PTS	= as.factor(MVR_PTS)
)
cat_discrete_freq <-
cat_discrete_vars[, sapply(cat_discrete_vars, is.factor)] %>%
gather("var", "value") %>%
group_by(var) %>%
count(var, value) %>%
mutate(prop = prop.table(n))
ggplot(data = cat_discrete_freq,
aes(x = reorder(value, prop),
y = prop)) +
geom_bar(stat = "identity") +
facet_wrap(~var, scales = "free") +
coord_flip() +
ggthemes::theme_fivethirtyeight()
# https://stackoverflow.com/questions/34860535/how-to-use-dplyr-to-generate-a-frequency-table?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
####Side-by-Side Boxplots
boxplot_data <- cat_discrete_vars %>%
select_if(is.factor) %>%
mutate(TARGET_AMT = cat_discrete_vars$TARGET_AMT) %>%
dplyr::select(-TARGET_FLAG) %>%
reshape2::melt(id.vars = "TARGET_AMT")
### Side-by-Side Boxplots
ggplot(data = boxplot_data, aes(x = value, y = TARGET_AMT)) +
geom_boxplot() +
facet_wrap( ~ variable, scales = "free") +
stat_summary(fun.y=mean, geom="point", size=1, color = "red") +
scale_y_sqrt(breaks = c(1000, 5000, 10000, 20000 * c(1:4))) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))# +
#coord_flip() +
#ggthemes::theme_fivethirtyeight()
#Reference: https://stackoverflow.com/questions/14604439/plot-multiple-boxplot-in-one-graph?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
### Scatterplots
continuous_vars <-
cat_discrete_vars %>%
mutate(TARGET_FLAG = as.numeric(TARGET_FLAG) - 1) %>%
select_if(is.numeric) %>%
mutate(TARGET_FLAG = as.factor(TARGET_FLAG))
memory.limit(size = 20000)
# binary_plot <- GGally::ggpairs(
#   na.omit(continuous_vars),
#   mapping = ggplot2::aes(color = TARGET_FLAG),
#   lower = list(continuous = wrap('points', size = 1, alpha = .4),
#               combo = wrap('facetdensity', alpha = 1)),
#   upper = list(continuous =  wrap("cor", size = 3, alpha = 1),
#               combo = 'box'),
#   diag =  list(continuous = wrap('barDiag', alpha = .9, bins = 15 ))
#  )  +
#   theme(panel.background = element_rect(fill = 'grey92', color = NA),
#         panel.spacing = unit(3, "pt"),
#         panel.grid = element_line(color = 'white'),
#         strip.background = element_rect(fill = "grey85", color = NA),
#         #plot.margin = margin(.1, .1, .1, .1, "cm"),
#         panel.border = element_rect(color = "grey85", fill=NA, size= unit(.5, 'pt')))
#
# binary_plot
#http://ggobi.github.io/ggally/#columns_and_mapping
##CORRELATIONS
cormatrix <-
continuous_vars %>%
dplyr::select(-TARGET_FLAG) %>%
cor(use = "complete.obs")
#plot
#corrplot(cormatrix, method = "square", type = "upper")
#find the top correlations
correlations <- c(cormatrix[upper.tri(cormatrix)])
cor_df <-
data.frame(Var1 = rownames(cormatrix)[row(cormatrix)[upper.tri(cormatrix)]],
Var2 = colnames(cormatrix)[col(cormatrix)[upper.tri(cormatrix)]],
Correlation = correlations,
Rsquared = correlations^2
) %>%
arrange(-Rsquared)
#Reference: https://stackoverflow.com/questions/28035001/transform-correlation-matrix-into-dataframe-with-records-for-each-row-column-pai
kable(head(cor_df, 5), digits = 2, row.names = T, caption = "Top Correlated Variable Pairs")
#Corrrelations with TARGET_AMT
TARGET_AMT_corr <- subset(cor_df, Var2 == "TARGET_AMT" | Var1 == "TARGET_AMT")
rownames(TARGET_AMT_corr) <- 1:nrow(TARGET_AMT_corr)
kable(head(TARGET_AMT_corr, 5), digits = 2, row.names = T, caption = "Top Corrrelations with the Response Variable")
## Missing Values
missing_plot <- VIM::aggr(train_data,  numbers=TRUE, sortVars=TRUE,
labels=names(train_data),
ylab=c("Missing Value Counts","Pattern"))
sum(train_data$JOB == "")
summary(missing_plot)
summary(missing_plot)$missings
metrics_df$range
metrics_df
missing_value_ct <- summary(missing_plot)$missings
metrics_df$range
metrics_df
missing_value_ct$missings
missing_value_ct$missings
missing_value_ct <- summary(missing_plot)$missings
missing_value_ct
metrics_df
missing_value_ct
exists("metrics_df")
!exists("metrics_df")
### Scatterplots
continuous_vars <-
cat_discrete_vars %>%
mutate(TARGET_FLAG = as.numeric(TARGET_FLAG) - 1) %>%
select_if(is.numeric) %>%
mutate(TARGET_FLAG = as.factor(TARGET_FLAG))
memory.limit(size = 20000)
binary_plot <- GGally::ggpairs(
continuous_vars,
mapping = ggplot2::aes(color = TARGET_FLAG),
lower = list(continuous = wrap('points', size = 1, alpha = .4),
combo = wrap('facetdensity', alpha = 1)),
upper = list(continuous =  wrap("cor", size = 3, alpha = 1),
combo = 'box'),
diag =  list(continuous = wrap('barDiag', alpha = .9, bins = 15 ))
)  +
theme(panel.background = element_rect(fill = 'grey92', color = NA),
panel.spacing = unit(3, "pt"),
panel.grid = element_line(color = 'white'),
strip.background = element_rect(fill = "grey85", color = NA),
#plot.margin = margin(.1, .1, .1, .1, "cm"),
panel.border = element_rect(color = "grey85", fill=NA, size= unit(.5, 'pt')))
binary_plot
#http://ggobi.github.io/ggally/#columns_and_mapping
orig_var_mod <- lm(TARGET_AMT ~ ., data = train_lm_data)
train_lm_data <- dplyr::select(train_data, -TARGET_FLAG)
lm_base <- lm(TARGET_AMT ~ .^2, data = train_lm_data)
orig_var_mod <- lm(TARGET_AMT ~ ., data = train_lm_data)
summary(lm_base)
summary(orig_var_mod)
orig_var_bk_elim <- lmodel_summary(orig_var_mod)
PRESS <- function(linear.model) {
#source:  https://gist.github.com/tomhopper/8c204d978c4a0cbcb8c0#file-press-r
#' calculate the predictive residuals
pr <- residuals(linear.model)/(1-lm.influence(linear.model)$hat)
#' calculate the PRESS
PRESS <- sum(pr^2)
return(PRESS)
}
pred_r_squared <- function(linear.model) {
#source: https://gist.github.com/tomhopper/8c204d978c4a0cbcb8c0#file-pred_r_squared-r
#' Use anova() to get the sum of squares for the linear model
lm.anova <- anova(linear.model)
#' Calculate the total sum of squares
tss <- sum(lm.anova$'Sum Sq')
# Calculate the predictive R^2
pred.r.squared <- 1-PRESS(linear.model)/(tss)
return(pred.r.squared)
}
lmodel_summary <- function(model, y_var) {
### Summarizes the model's key statistics in one row
df_summary <- glance(summary(model))
model_name <- deparse(substitute(model))
n_predictors <- ncol(model$model) - 1
pred.r.squared <- pred_r_squared(model)
df_summary <- cbind(model_name, n_predictors, pred.r.squared, df_summary)
return(df_summary)
}
backward_elim_lm <- function(lmod){
#performs backward elimination model selection
#removes variables until all remaining ones are stat-sig
removed_vars <- c()
removed_pvalues <- c()
while (max(summary(lmod)$coefficients[, 4]) > .05){
# find insignificant pvalue
pvalues <- summary(lmod)$coefficients[, 4]
max_pvalue <- max(pvalues)
remove <- names(which.max(pvalues))
removed_vars <- c(removed_vars, remove)
removed_pvalues <- c(removed_pvalues, max_pvalue)
# update model
lmod <- update(lmod, as.formula(paste(".~.-", remove)))
}
print("Removed variables:")
print(cbind(removed_vars, round(removed_pvalues,3)))
return(glmod)
}
orig_var_bk_elim <- lmodel_summary(orig_var_mod)
orig_var_bk_elim <- backward_elim_lm(orig_var_mod)
backward_elim_lm <- function(lmod){
#performs backward elimination model selection
#removes variables until all remaining ones are stat-sig
removed_vars <- c()
removed_pvalues <- c()
while (max(summary(lmod)$coefficients[, 4]) > .05){
# find insignificant pvalue
pvalues <- summary(lmod)$coefficients[, 4]
max_pvalue <- max(pvalues)
remove <- names(which.max(pvalues))
removed_vars <- c(removed_vars, remove)
removed_pvalues <- c(removed_pvalues, max_pvalue)
# update model
lmod <- update(lmod, as.formula(paste(".~.-", remove)))
}
print("Removed variables:")
print(cbind(removed_vars, round(removed_pvalues,3)))
return(lmod)
}
orig_var_bk_elim <- backward_elim_lm(orig_var_mod)
